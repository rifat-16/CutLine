import 'package:flutter/material.dart';
import '../models/salon_model.dart';
import '../models/barber_model.dart';
import '../services/firestore_service.dart';
import '../services/storage_service.dart';
import 'dart:io';

class SalonProvider with ChangeNotifier {
  final FirestoreService _firestoreService = FirestoreService();
  final StorageService _storageService = StorageService();

  SalonModel? _currentSalon;
  List<SalonModel> _allSalons = [];
  List<BarberModel> _barbers = [];
  bool _isLoading = false;
  String? _error;

  SalonModel? get currentSalon => _currentSalon;
  List<SalonModel> get allSalons => _allSalons;
  List<BarberModel> get barbers => _barbers;
  bool get isLoading => _isLoading;
  String? get error => _error;

  // Stream of all salons
  Stream<List<SalonModel>> get salonsStream => _firestoreService.getSalonsStream();

  // Load current salon by ID
  Future<void> loadSalon(String salonId) async {
    try {
      _isLoading = true;
      _error = null;
      notifyListeners();

      _currentSalon = await _firestoreService.getSalon(salonId);
      if (_currentSalon != null) {
        await loadBarbers(salonId);
      }
    } catch (e) {
      _error = e.toString();
      print('Error loading salon: $e');
    } finally {
      _isLoading = false;
      notifyListeners();
    }
  }

  // Load barbers for a salon
  Future<void> loadBarbers(String salonId) async {
    try {
      _barbers = await _firestoreService.getBarbersStream(salonId).first;
      notifyListeners();
    } catch (e) {
      _error = e.toString();
      print('Error loading barbers: $e');
    }
  }

  // Stream of barbers
  Stream<List<BarberModel>> getBarbersStream(String salonId) {
    return _firestoreService.getBarbersStream(salonId);
  }

  // Create salon
  Future<String?> createSalon({
    required String name,
    required String location,
    required String ownerId,
    File? image,
  }) async {
    try {
      _isLoading = true;
      _error = null;
      notifyListeners();

      String? imageUrl;
      if (image != null) {
        // We'll upload the image after getting the salon ID
        imageUrl = null; // Set temporarily
      }

      final salon = SalonModel(
        id: '', // Will be generated by Firestore
        name: name,
        ownerId: ownerId,
        location: location,
        services: [],
        barbers: [],
        createdAt: DateTime.now(),
        imageUrl: imageUrl,
      );

      final salonId = await _firestoreService.createSalon(salon);

      // Upload image if provided
      if (image != null) {
        imageUrl = await _storageService.uploadSalonImage(image, salonId);
        await _firestoreService.updateSalon(salonId, {'imageUrl': imageUrl});
      }

      return salonId;
    } catch (e) {
      _error = e.toString();
      print('Error creating salon: $e');
      return null;
    } finally {
      _isLoading = false;
      notifyListeners();
    }
  }

  // Update salon
  Future<bool> updateSalon(String salonId, Map<String, dynamic> data) async {
    try {
      _isLoading = true;
      _error = null;
      notifyListeners();

      await _firestoreService.updateSalon(salonId, data);
      if (_currentSalon?.id == salonId) {
        await loadSalon(salonId);
      }
      return true;
    } catch (e) {
      _error = e.toString();
      print('Error updating salon: $e');
      return false;
    } finally {
      _isLoading = false;
      notifyListeners();
    }
  }

  // Add barber to salon
  Future<bool> addBarber({
    required String salonId,
    required String barberId,
    required String name,
    required String phone,
    File? image,
  }) async {
    try {
      _isLoading = true;
      _error = null;
      notifyListeners();

      String? imageUrl;
      if (image != null) {
        imageUrl = await _storageService.uploadBarberImage(image, salonId, barberId);
      }

      final barber = BarberModel(
        id: barberId,
        salonId: salonId,
        name: name,
        phone: phone,
        available: true,
        services: [],
        currentQueue: [],
        createdAt: DateTime.now(),
        imageUrl: imageUrl,
      );

      await _firestoreService.createBarber(barber);

      // Update salon's barbers list
      final salon = await _firestoreService.getSalon(salonId);
      if (salon != null) {
        final updatedBarbers = List<String>.from(salon.barbers)..add(barberId);
        await _firestoreService.updateSalon(salonId, {'barbers': updatedBarbers});
      }

      return true;
    } catch (e) {
      _error = e.toString();
      print('Error adding barber: $e');
      return false;
    } finally {
      _isLoading = false;
      notifyListeners();
    }
  }

  void clearError() {
    _error = null;
    notifyListeners();
  }

  void clearCurrentSalon() {
    _currentSalon = null;
    _barbers = [];
    notifyListeners();
  }
}
